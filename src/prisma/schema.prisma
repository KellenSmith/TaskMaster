generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model OrganizationSettings {
    remindMembershipExpiresInDays    Int    @default(7)
    organizationName                 String @unique @default("Task Master")
    purgeMembersAfterDaysUnvalidated Int    @default(180)
    email                            String @default("kellensmith407@gmail.com")

    @@map("organization_settings")
}

enum UserRole {
    user
    admin
}

model User {
    id                   String   @id @default(uuid())
    firstName            String   @default("")
    surName              String   @default("")
    nickname             String   @unique @default(uuid())
    pronoun              String?  @default("they/them")
    email                String   @unique
    phone                String?  @default("")
    createdAt            DateTime @default(now())
    consentToNewsletters Boolean  @default(true)
    role                 UserRole @default(user)

    userCredentials UserCredentials?

    userMembership UserMembership?

    hostingEvents     Event[]
    participantEvents ParticipantInEvent[]
    reserveEvents     ReserveInEvent[]

    assignedTasks Task[]  @relation("Assignee")
    reporterTasks Task[]  @relation("Reporter")
    Order         Order[]

    @@map("users") // Map to table named "users"
}

// No users can log in without credentials.
// Admins can validate membership to create credentials for user.
model UserCredentials {
    id             String @id @default(uuid())
    user           User   @relation(fields: [userId], references: [id])
    userId         String @unique
    salt           String
    hashedPassword String

    @@map("user_credentials")
}

enum EventStatus {
    draft
    published
    cancelled
}

model Event {
    id              String      @id @default(uuid())
    title           String      @default("")
    location        String      @default("")
    startTime       DateTime
    endTime         DateTime
    description     String      @default("")
    maxParticipants Int? // null if unlimited
    fullTicketPrice Int         @default(0)
    status          EventStatus @default(draft)

    host   User   @relation(fields: [hostId], references: [id])
    hostId String

    participantUsers ParticipantInEvent[]
    reserveUsers     ReserveInEvent[]
    tasks            Task[]
    tickets          Ticket[]

    @@map("events")
}

// Many-to-many relation btw users and events
// Each user can participate in multiple events
// Each event can have multiple participants
model ParticipantInEvent {
    User     User   @relation(fields: [userId], references: [id])
    userId   String
    Event    Event  @relation(fields: [eventId], references: [id])
    eventId  String
    ticket   Ticket @relation(fields: [ticketId], references: [id])
    ticketId String // All participants must have a ticket

    @@id([userId, eventId, ticketId])
}

// Many-to-many relation btw users and events
// Each user can be on reserveList in multiple events
// Each event can have multiple reserve users
model ReserveInEvent {
    User          User     @relation(fields: [userId], references: [id])
    userId        String
    Event         Event    @relation(fields: [eventId], references: [id])
    eventId       String
    queueingSince DateTime @default(now())

    @@id([userId, eventId])
}

enum TaskStatus {
    toDo
    inProgress
    inReview
    done
}

enum TaskPhase {
    before
    during
    after
}

model Task {
    id         String  @id @default(uuid())
    Event      Event?  @relation(fields: [eventId], references: [id])
    eventId    String?
    Assignee   User?   @relation("Assignee", fields: [assigneeId], references: [id])
    assigneeId String?
    Reporter   User?   @relation("Reporter", fields: [reporterId], references: [id])
    reporterId String?

    phase       TaskPhase  @default(before)
    name        String     @default("")
    status      TaskStatus @default(toDo)
    tags        String[]   @default([])
    startTime   DateTime?
    endTime     DateTime?
    description String     @default("")

    @@map("tasks")
}

model Product {
    id             String  @id @default(uuid())
    name           String  @default("")
    description    String  @default("")
    price          Float   @default(0)
    stock          Int?    @default(0)
    unlimitedStock Boolean @default(false)
    imageUrl       String  @default("")

    Membership Membership?
    Ticket     Ticket?

    orderItems OrderItem[]

    @@map("products")
}

model Membership {
    id        String  @id @default(uuid())
    Product   Product @relation(fields: [productId], references: [id])
    productId String  @unique
    duration  Int     @default(365) // in days

    userMemberships UserMembership[]

    @@map("memberships")
}

model UserMembership {
    id           String     @id @default(uuid())
    user         User       @relation(fields: [userId], references: [id])
    userId       String     @unique // One membership per user
    membership   Membership @relation(fields: [membershipId], references: [id])
    membershipId String

    expiresAt DateTime

    @@map("user_memberships")
}

enum TicketType {
    earlyBird
    volunteer
    standard
}

model Ticket {
    id                 String               @id @default(uuid())
    type               TicketType           @default(standard)
    Product            Product              @relation(fields: [productId], references: [id])
    productId          String               @unique
    Event              Event                @relation(fields: [eventId], references: [id])
    eventId            String
    ParticipantInEvent ParticipantInEvent[]

    @@map("tickets")
}

enum OrderStatus {
    pending
    paid
    shipped
    completed
    cancelled
    error
}

model Order {
    id               String      @id @default(uuid())
    createdAt        DateTime    @default(now())
    updatedAt        DateTime    @updatedAt
    status           OrderStatus @default(pending)
    totalAmount      Float       @default(0.0) // Total amount in the smallest currency unit (e.g., Ã¶re)
    paymentRequestId String?     @unique
    payeeRef         String?     @unique // Reference to the payment provider's transaction

    user   User   @relation(fields: [userId], references: [id])
    userId String

    orderItems OrderItem[]

    @@map("orders")
}

model OrderItem {
    id       String @id @default(uuid())
    quantity Int    @default(1)
    price    Float  @default(0)

    order   Order  @relation(fields: [orderId], references: [id])
    orderId String

    product   Product @relation(fields: [productId], references: [id])
    productId String

    @@map("order_items")
}

model TextContent {
    id       String  @id
    language String
    content  String
    category String? @default("organization") // ui, email, help, etc.

    @@unique([id, language])
    @@map("text_contents")
}
