generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
    id                String           @id @default(uuid())
    firstName         String
    surName           String
    nickname          String
    email             String           @unique
    phone             String           @unique
    created           DateTime         @default(now())
    membershipRenewed DateTime? // Membership is invalid if null or expired
    role              String           @default("user") // user, admin
    userCredentials   UserCredentials?

    hostingEvents     Event[]
    participantEvents ParticipantInEvent[]
    reserveEvents     ReserveInEvent[]

    assignedTasks Task[] @relation("Assignee")
    reporterTasks Task[] @relation("Reporter")

    @@map("users") // Map to table named "users"
}

// No users can log in without credentials.
// Admins can validate membership to create credentials for user.
model UserCredentials {
    id             String @id @default(uuid())
    user           User   @relation(fields: [email], references: [email])
    email          String @unique // relation scalar field (used in the `@relation` attribute above)
    salt           String
    hashedPassword String

    @@map("user_credentials")
}

model Event {
    id              String   @id @default(uuid())
    title           String
    location        String
    startTime       DateTime
    endTime         DateTime
    description     String
    maxParticipants Int
    fullTicketPrice Int
    status          String   @default("draft") // draft, published

    host   User   @relation(fields: [hostId], references: [id])
    hostId String

    participantUsers ParticipantInEvent[]
    reserveUsers     ReserveInEvent[]
    tasks            Task[]

    @@map("events")
}

// Many-to-many relation btw users and events
// Each user can participate in multiple events
// Each event can have multiple participants
model ParticipantInEvent {
    User    User   @relation(fields: [userId], references: [id])
    userId  String
    Event   Event  @relation(fields: [eventId], references: [id])
    eventId String

    @@id([userId, eventId])
}

// Many-to-many relation btw users and events
// Each user can be on reserveList in multiple events
// Each event can have multiple reserve users
model ReserveInEvent {
    User          User     @relation(fields: [userId], references: [id])
    userId        String
    Event         Event    @relation(fields: [eventId], references: [id])
    eventId       String
    queueingSince DateTime @default(now())

    @@id([userId, eventId])
}

model Task {
    id         String  @id @default(uuid())
    Event      Event?  @relation(fields: [eventId], references: [id])
    eventId    String? // Tasks without event id are considered defaults
    Assignee   User?   @relation("Assignee", fields: [assigneeId], references: [id])
    assigneeId String?
    Reporter   User?   @relation("Reporter", fields: [reporterId], references: [id])
    reporterId String?

    phase       String   @default("before") // before, during, after
    name        String
    status      String   @default("to do") // to do, in progress, in review, done
    tags        String[] @default([])
    startTime   DateTime
    endTime     DateTime
    description String

    @@map("tasks")
}
