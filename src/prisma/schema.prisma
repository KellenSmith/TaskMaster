generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserRole {
    user
    admin
}

model User {
    id                   String           @id @default(uuid())
    firstName            String           @default("")
    surName              String           @default("")
    nickname             String           @unique @default(uuid())
    pronoun              String?          @default("they/them")
    email                String           @unique
    phone                String?          @default("")
    created              DateTime         @default(now())
    membershipRenewed    DateTime? // Membership is invalid if null or expired
    consentToNewsletters Boolean          @default(true)
    role                 UserRole         @default(user)
    userCredentials      UserCredentials?

    hostingEvents     Event[]
    participantEvents ParticipantInEvent[]
    reserveEvents     ReserveInEvent[]

    assignedTasks Task[]  @relation("Assignee")
    reporterTasks Task[]  @relation("Reporter")
    Order         Order[]

    @@map("users") // Map to table named "users"
}

// No users can log in without credentials.
// Admins can validate membership to create credentials for user.
model UserCredentials {
    id             String @id @default(uuid())
    user           User   @relation(fields: [email], references: [email])
    email          String @unique // relation scalar field (used in the `@relation` attribute above)
    salt           String
    hashedPassword String

    @@map("user_credentials")
}

enum EventStatus {
    draft
    published
    cancelled
}

model Event {
    id              String      @id @default(uuid())
    title           String      @default("")
    location        String      @default("")
    startTime       DateTime
    endTime         DateTime
    description     String      @default("")
    maxParticipants Int? // null if unlimited
    fullTicketPrice Int         @default(0)
    status          EventStatus @default(draft)

    host   User   @relation(fields: [hostId], references: [id])
    hostId String

    participantUsers ParticipantInEvent[]
    reserveUsers     ReserveInEvent[]
    tasks            Task[]

    @@map("events")
}

// Many-to-many relation btw users and events
// Each user can participate in multiple events
// Each event can have multiple participants
model ParticipantInEvent {
    User    User   @relation(fields: [userId], references: [id])
    userId  String
    Event   Event  @relation(fields: [eventId], references: [id])
    eventId String

    @@id([userId, eventId])
}

// Many-to-many relation btw users and events
// Each user can be on reserveList in multiple events
// Each event can have multiple reserve users
model ReserveInEvent {
    User          User     @relation(fields: [userId], references: [id])
    userId        String
    Event         Event    @relation(fields: [eventId], references: [id])
    eventId       String
    queueingSince DateTime @default(now())

    @@id([userId, eventId])
}

enum TaskStatus {
    toDo
    inProgress
    inReview
    done
}

enum TaskPhase {
    before
    during
    after
}

model Task {
    id         String  @id @default(uuid())
    Event      Event?  @relation(fields: [eventId], references: [id])
    eventId    String?
    Assignee   User?   @relation("Assignee", fields: [assigneeId], references: [id])
    assigneeId String?
    Reporter   User?   @relation("Reporter", fields: [reporterId], references: [id])
    reporterId String?

    phase       TaskPhase  @default(before)
    name        String     @default("")
    status      TaskStatus @default(toDo)
    tags        String[]   @default([])
    startTime   DateTime?
    endTime     DateTime?
    description String     @default("")

    @@map("tasks")
}

model Product {
    id             String  @id @default(uuid())
    name           String  @default("")
    description    String  @default("")
    price          Float   @default(0)
    stock          Int?    @default(0)
    unlimitedStock Boolean @default(false)
    imageUrl       String  @default("")

    orderItems OrderItem[]

    @@map("products")
}

enum OrderStatus {
    pending
    paid
    completed
    cancelled
}

model Order {
    id          String      @id @default(uuid())
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    status      OrderStatus @default(pending)
    totalAmount Float       @default(0.0)

    user   User   @relation(fields: [userId], references: [id])
    userId String

    orderItems OrderItem[]

    @@map("orders")
}

model OrderItem {
    id       String @id @default(uuid())
    quantity Int    @default(1)
    price    Float  @default(0)

    order   Order  @relation(fields: [orderId], references: [id])
    orderId String

    product   Product @relation(fields: [productId], references: [id])
    productId String

    @@map("order_items")
}

model TextContent {
    id       String  @id
    language String
    content  String
    category String? @default("organization") // ui, email, help, etc.

    @@unique([id, language])
    @@map("text_contents")
}
